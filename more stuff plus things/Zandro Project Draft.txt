Possible names for this project:

-ZanMan
-RanDooM
-ServeBot
-"server hosting for lazy people"

Possible names for difficulties (because we're bored, also 5 (or 6) instead of 3 might be better but i can't think of any more phrases)
Easy:        "a walk in the park"
Medium:      "mildly intimidating"
Medium-Hard: "moderately difficult"
Hard:        "high chance of inevitable death"
Very Hard:   "the ultimate slaughterfest"

***********************************************************************************************************************************
PROJECT BREAKDOWN:

Script A: Server Manager (me)
Script B: Player-to-Server Interactions (Matt)
Script C: Site manager for multiple boxes / linodes, with ability to use different Server Manager user script per box (Matt)
***********************************************************************************************************************************

--------------------
Script A breakdown: |
--------------------
Thoughts on hosting:
	-Start out with just one set of dmflags, auto set to four player, classic mode
	-Script everything else
	-See how people like the servers
	-Add randomization slowly
	-Make the servers anti-cheese (ie. no rjumping, no freelook on map30, etc)

Things to add to project later on:
	1.) Server Statistics [table draft is kind of started already]
	2.) Zandrnoum Version history (and a way to store all of them in one spot?)

My cluster (This is just a general idea of what the cluster could look like.):

Servers 1-3: VP's Marathon Server
Servers 3-7: VP's Oldschool Survival'
Servers 4-18: VP's Unmodded Survival
Servers 19-23: VP's Survival with mods
Servers 24-33: VP's Unmodded Co-operative
Servers 34-38: VP's Co-op with mods



----------------------------
| DATABASE TABLE STRUCTURE |
----------------------------

TABLE 1: IWADs

Column 1: Primary Key (just in the order it was added to the database)
Column 2: Name of IWAD
Column 3: MD5SUM of IWAD
Column 4: Full map rotation list

Primary Key: Column 1 (because we won't be adding multiple iwad files in here, like, ever)


TABLE 2-1: PWADs

Column 1:  Primary Key (a number; Columns 2, 3, 4, and 5 together also must be unique)
Column 2:  Collection number (just in the order it was added to the database)
Column 3:  Title of the collection of files for this map pack or mod (even if a single file)
Column 4:  Name of file
Column 5:  MD5SUM of PWAD
Column 6:  Load order of file (it is assumed the order which you list the files is the correct load order for the server)
Column 7:  Classification Tier level for file (0 = main file, 1 = addon, but for a specific mod, 2 = addon that is completely optional, like a skins/music pack [these files would work on top of any map pack])
Column 8:  Is this file updated or out of date? (boolean, also how exactly do we check this?  might be a better way to do this one)
Column 9:  'mod' or 'map pack' (include a 'both' field?  maybe not for now; for now, we just stick to adding ones that are not both)
Column 10: intended IWAD
Column 11: if Column 8 == 'mod' then NULL, if column 8 == 'map pack', then compatible gamemodes
Column 12: if column 8 == 'mod' then NULL, if column 8 == 'map pack', then MAPLIST (in format: "e1m1-e1m9, e2m1-e2m9, e3m1-e3m9", etc.)
# Column 11: Is this collection a WIP?  (if yes, then we can give special title, or expect newer versions later on)
Column 13: The date that the file was created (like, the original file creation date, ie. if the wad was made in 1995 or something)
Colunn 14: The date that the file was added to the database
Column 15: Filesize of WAD (in kb i guess)
Column 16: URL for Linode download
Column 17: Additional notes about this file

Primary Key: Columns 1, 2, 3, 4, and 5




TABLE 2-2: Dependencies List

Column 1: ID # for Table 2-3
Column 2: Name of dependency file
Column 3: MD5SUM of dependency file
Column 4: Is this file updated or out of date?
Column 5: URL for Linode download

Primary Key: Column 1




TABLE 2-3: WADS & their Dependencies

Column 1: ID # from Table 2-1
Column 2: ID # from Table 2-2

Primary Key: Columns 1 & 2




TABLE 3-1: Server Variations

Column 1:  Variation ID #
Column 2:  Title of Server Variation
Column 3:  Gamemode of Server Variation
Column 4:  Starting Port # for this Variation
Column 5:  Maximum # of servers for variation
Column 6:  Max Players for Variation
Column 7:  Max Clients for Variation
Column 8:  DMFLAGS
Column 9:  DMFLAGS2
Column 10: DMFLAGS3
Column 11: COMPATFLAGS
Column 12: COMPLATFLAGS2
Column 13: Friendly Fire (number, default 0)
Column 14: Unmodded or Mixed
Column 15: Server Variation MOTD
Column 16: Does this Variation require a connect password?
Column 17: Does this Variation require a join password?
Column 18: Is this server private? (not broadcast to master publically)
Column 19: If Col 8 & Col 9 = FALSE, 0; otherwise, number of days per password reset
Column 20: Enable Server Rotation?
Column 21: If Server Rotation is TRUE, then number of servers to rotate per week
Column 22: If Server Rotation is TRUE, then number of days per rotation
Column 23: If (Col 19 > 0) || (Col 20 == TRUE) then time of day which to perform these operations on these days (we'll need to track the days left too with our bot)
Column 24: Pool this Variation for the Marathon (if Marathon is enabled?) (Boolean)
Column 25: Check for the Marathon Variation

Primary Key: Column 1




TABLE 3-2: Variation Wad Preloading List

Column 1: Variation ID #
Column 2: ID from Table 2-1
Column 3: Load order of file

Primary Key: Column 1, 2, and 3



TABLE 4: Combinations List & Statistics (can use SQL queries to calcuate these stats)

Column 1:
Column 2:
Column 3:
Column 4:  Number of hours server up, across all servers
Column 5:  Number of hours server inactive (could possibly be readable by checking arbitrary map reset on all players disconnect?)
Column 6:  Average number of hours server up per server run
Column 7:  Average number of players in the server (average of averages, i guess, also is this even possible)
Column 8:  Max Average number of players in the server
Column 9:  Date + time that the Max Average was achieved
Column 10: Peak Average
Column 11: Max Peak
Column 12: Date + time that the Max Peak was achieved
Column 13: Number of times the server has been run
Column 14: Date the Server was first run
Column 15: Date the Server was last run

Primary Key: Column 1


Note: Blzut gave the following advice:
	First thing you should ask yourself about your table is, are you able to write the queries you want with the table?
	Will you be able to write queries that involve multiple columns that will provide interesting and meaningful results?
	If so, then the table is written correctly.  If not, then you need to rethink your table a bit

	Also, try to think about whether or not the table's data would be useful for, say the FNF table you might make later on.
	Could you somehow use data from this table and that table to make your life a whole lot easier?

-------------------
|    GAMEMODES    |
-------------------
CO-OP:      coop and survival co-op gamemodes
INVASION:   invasion gamemode (needs to be different from co-op; to get survival invasion, just add lives to it)
CTF:        capture the flag, one flag ctf gamemodes
SKULLTAG:   skulltag gamemode
DEATHMATCH: deathmatch, team deathmatch, possession, team possession, terminator gamemodes
LMS:        last man standing, team last man standing gamemodes (some map packs might not have placed weapons?  this is technically possible)
DUEL:       duel map packs (although really, how will this be useful for us)
TEAMGAME:   acs-based gamemodes
DOMINATION: domination map packs
RJUMPING:   rocket jump wads
MISC:       was thinking of not putting this, but for co-op I don't want thing like jumpmaze or WDI to be put in there

--------------------
|  IRC BOT SCRIPT  |
--------------------
-This script is for everything that *requires* user interaction.

Structure:
	1.) CONNECTION SCRIPT: ALEXMAX'S AND KONAR6'S CODE GOES HERE; PUT THE PARTS NEEDED TO CONNECT ONLY!
	2.) BOT COMMANDS FOR DATABASE STUFF:
		IWAD STUFF: (NOTE: I really do not think this will be a huge priority for now.  Do PWAD for now... IWAD stuff will be handled internally. The only thing that I can
				      see this table doing well for us is for good error checking.  Check if [intended IWAD] is an IWAD in our other database first)
			a.) .addIWAD [wadname], [MAPLIST]
		PWAD STUFF:
			a.) .addColl [collection]
				-where [collection] is in the format:
					[Collection Title], [wadname1, wadname2, .... , wadnamen(1/2)], [mod or map pack], [intended IWAD], [Gamemode], [MAPLIST]
						-yes i know, there should be a way to do like DM + CO-OP with wads that can do both, but too lazy right now
						NOTE: be sure to remember, when this is executed, fill Column 11 with a valid datetime that the collection wad added to DB
			b.) .updatePWAD [Collection String Name], [wadname], [CollectionTitle=?, Wadname=?, Type=?, intIWAD=?, Gamemode=?, MAPLIST=?]
				-NOTE: for updating wadname ONLY, after this is executed, old wadname is NOT removed, but column 9 becomes False, and new wadname has Column 9 = True
			c.) .addURL [Collection String Name], [wadname], [url]
				-NOTE: please, PLEASE! be sure to figure out first if the link will work with the Linode's url get function.... some links download html files and call it the wad name.. yuck!
			d.) .delPWAD [Collection String Name], [wadname]
			e.) .delColl [Collection String Name]
		DEPENDENCY STUFF:
			a.) .AddDependency [depname], [URL]
			b.) .AddDependenciesForFile [wadname], [dep1, dep2, .... , depn]
				-NOTE: It is assumed that if you update a WAD, that the dependencies for that new updated WAD are the same, UNLESS YOU GO AND REMOVE THEM!
			c.) .removeDependenciesforFile [wadname]
		EXTANEOUS FUNCTIONS:
			a.) .fileExists [wadname]
			b.) .fetchMD5SUMS
				-This will be a function that will check my box for all PWADs and match the database with it, and update MD5SUMS.  Output should be # of lines affected
			c.) .findWAD [md5sum]
				-returns wadname
			d.) .fetchFileCreationDates
				-This function will check my Linode for all PWADs and put the file creation date in the Database.  Output should be # of lines affected
			e.) .numCollections
			f.) .numPWADS
	3.) BOT COMMANDS FOR SERVER STUFF: (NOTE: if I want to make this easy for Jenova, I want to avoid using the same functions he uses.  Distinguish your's from his!)
		VARIATION MANAGEMENT:
			a.) .createVar [Server Variation Title], [Gamemode for Variation], [Max # of Servers for Variation], [Max Players], [Max Clients]
			b.) .CoreSettings [Server Variation Title], [VarTitle=?, VarGamemode=?, VarMPlayers=?, VarMClients=?]
			c.) .VarForceIWAD [Server Variation Title], [(NOT) IWAD, or 'any']
			d.) .VarForcePWADs [Server Variation Title], [wadname1, wadname2, .... , wadnamen]
			e.) .VarRemoveForcedPWADS [Server Variation Title]
			f.) .VarFlags [Server Variation Title], [DMFLAGS], [DMFLAGS2], [DMFLAGS3], [COMPATFLAGS], [COMPATFLAGS2]
			g.) .VarTDamage [Server Variation Title] [Team Damage value]
			h.) .VarModSettings [Server Variation Title], ["mods allowed", "no mods allowed", "mix it up"]
			i.) .VarMOTD [Server Variation Title], [MOTD]
			j.) .requireVarPassword [Server Variation Title], [Connect or Join] [# Days that this password will last before automatic reset, default value = 0 for permanent password]
			k.) .varRotation [Server Variation Title] ["on", "off"]
			l.) .addVarToMarathonPool [Server Variation Title] ["on", "off"]
				-yes i know, this is very vague.  Basically, marathon being on or off won't affect the actual variation.  rather, the "marathon" is going to be its own thing.  all those
				 with it on can be "pooled" into the marathon variation.  obviously, a marathon will be completely randomized, and the dmflags will not be constant; it will depend on the
				 actual variation chosen...

				 this is an interesting idea... or perhaps it is a horrible idea; that's why it doesn't really affect the actual variation whether or not it's on or off

				 instead of hosting like 30 servers of deathmatch/skulltag like most people would do, there would just be a "VP's Marathon Server" set and it'd not be specific to any one
				 type of server.. kind of like FNF, I suppose, but completely automated.  so, it could be useful, maybe not, but below are some commands to enable it.
			m.) .createMarathon [Server Variation Title], [Max # of servers for Marathon Variation] (NOTE: above commands can be used for this one, as it is technically like any other variation, but
											               MAKE A CHECK that will check that very last column, to see if it's true.. because certain
												     values (specifically, those in .VarFlags, .VarTDamange, VarGamemode/VarMPlayers/VarMClients
											               in the .CoreSettings function, and .addVarToMarathonPool have literally no purpose for the
											               Marathon as it will just inherit the settings of those added to the pool.

												     things like Password, MOTD, Rotation, and obviously the title apply to the variation, so
												     those things can be changed at will.

												     .delVar is used similarly to delete/disable the marathon should you wish to do so.

												     there cannot be multiple Marathon Variations, and we can check for this too.)
			n.) .delVar [Server Variation Title]
			o.) .varInfo [Server Variation Title]
		HOSTING STUFF: (NOTE: Okay, let's make a class that, when initialized, grabs all PID's for zandronum servers.  We should be able to go from there.  Also ask Water for help here.)
			a.) .hostVar [Server Variation #, or Server Variation Title (i guess)] [Number of Servers to host] [VarTitle=?, VarGamemode=?, ... , COMPATFLAGS2=?, TEAMDAMAGE=?, MODS=?]
			b.) .hostServer [wadname1, wadname2, .... , wadnamen] [Server Variation #]
		IDIOT MANAGEMENT:
			.findIPof ["Player Name"]
				-This will require the SV_MarkChatLines flag to be True.  Search all logs for "CONNECTION Player-Name xxx.xxx.xxx.xxx:xxxxx" format, report ALL unique IP's and post them on IRC.
			.findPlayersWithIP [IP in format xxx.xxx.xxx.xxx]
				-Also will require SV_MarkChatLines True.  This can be useful for taking an IP and finding all aliases that fit that range, from looking at the logs.
			.banIdiot ["Player Name", or IP]
				-If given a non-IP (player name), then first we run .findIPof.  We then print ALL unique IP's and post them on IRC.  Then, we post our suggested ban range.  Ask to confirm, then ban.
				(NOTE: aliases are a problem.  let us post the IP's as such: "[Player Name] - xxx.xxx.xxx.xxx")
				-If given an IP, we use the full IP to check for all aliases, then use that list of aliases to look for more IP's.  If more IP's are found, then we store them, print out all of the
				 aliases and IP's, and then that's it.  If all IP's point to xxx.xxx.*.*, then the user can re-search for finding more alises manually.

Uses:
	1.) Add to DB (stored as Zandronum Server Data Tuple -> converted to format used in DB titled "LIST OF IWADs AND PWADs"
	2.) Commands:
		a.) Check if a file exists in the database
		b.) Check if a MD5SUM is in the database -- if yes, then list the WAD file name.
                c.) Allow to SELECT from table
                d.) Perhaps allow manipulation of table.. *perhaps*
	3.) Perhaps the ability to manually perform anything in the "Core Project"
	4.) Ability to kill servers
	5.) Be able to use the bot to check a server (chat input will be server command)
		-This will require good authentication. Ideas include (thanks to Dusk and Water for input)
			a.) Look at hostname
			b.) Check the full /whois [although this is kind of tricky b/c stuff can change]
			c.) ???

--------------------
|  "Core Project"  |
--------------------
-This script is for everything that is *automated* -- that is, requires zero user interaction.

Uses:
	1.) Automate the checking of popularity
		-Possible methods:
			a.) Check file log size?
			b.) # people / # hours that server has been up for
			c.) counting the number of
			d.) combination of a, b, and c, and anything else i might think of
	2.) Automate the process of Hard Drive Space monitoring / tidying
		-This is covered in a verbose manner below
	3.) Automate Server Rotation Process
		-This is also covered below
	4.) Automate the process of Total Reset
		-That is, to reset all servers, but not randomize.  Basically like Armada's (another server cluster) run.py script
	5.) Randomization.
		a.) "Completely random"
		b.) We make up a beautiful way to equalize exposure to mods (less of really popular ones, more of less popular ones)
		c.) neither a or b (just a list of custom configurations)
	6.) The ability to add custom flags per map per mappack?? (ie. no freelook on map30 for icon of sin)
		-Add a way to reverse the command.
			a.) add a "Stop!" command
				1.) The command will be a randomly generated word per server (to prevent abuse)
					-words can come from a plaintext dictionary [text file]
				2.) This command will be displayed through the motd (if enabled)

NOTE: 5 especially will need a lot of work done.  we need to consider making a proper algorithm that will make randomization look
      at the popularity of a wad in DB to see if it should be worthwhile or not.  Also need to consider DMFLAGS too and other stuff.
      So, do the project with 5.) as a stub function for now. (Use the default DMFLAGS, and 4 player settings, and survival.)
***********************************************************************************************************************************
Programming Procedure:

Script I.) Bot Script

Write Script A first, follow below steps.  Then as time goes by we add everything else in slowly.

1.) Start with choosing a Database flavor -- answer: postgreSQL
2.) Download the Python module for it     -- answer: pyodbc
3.) learn how to create a table in mysql
4.) start writing functions to interact with the database
5.) add stuff to database
6.) (optional) practice python [as i am incredibly rusty] that can download all data from table into script, and perhaps do stuff
7.) find AlexMax's python script (or Konar's)
8.) start crediting people

Script II.) "Core Project" Script

1: stub
2: stub
3: not stub, do this first after database
4: not stub
5: stub
6: stub

NOTE: For Randomization, only randomize -fast, -respawn, -nightmare, or neither of the three.

NOTE 2: double ammo can be applied in column six of the database.  (example: mm2: no double ammo, requiem: maybe, scythe 2: yes)

Script III.) User script (includes custom variations)
	1.) 16 player variation
	2.) 4 player variations

	note: below is what randomization would use, but for our user config we just use default dmflags.  no need to randomize yet
	note 2: randomization doesn't need to be user script?  or does it


***********************************************************************************************************************************
Current variations: 3
***********************************************************************************************************************************
Variation 1.
	Title: VP's Classic Survival
	Gamemode: Survival
	SV_MaxPlayers: 4
	SV_MaxClients: 4
	DMflags: 3735556
	DMflags2: 0
	DMflags3: 16
	Compatflags: 196805
	Compatflags2: 8
	Type: Unmodded

Variatioon 2.



***********************************************************************************************************************************
***********************************************************************************************************************************
1.) Apply default dmflags

	Current Default DMFLAGS:
		DMflags      = 3735556
		DMflags2     = 0
		DMflags3     = 16
		Compatflags  = 196805 (skulltag 65668 - without shortest textures, wall running, or limited air movement - not sure why)
		Compatflags2 = 8 (zan 2.0 says this will turn into 65544)

2.) Choose Survival or Co-operative

	For Survival:

	For Co-operative:



3.) Choose Easy or hard, or a combination of both

	Ways to make the game easier:

	1.) lower damagefactor
	2.) removing multiplayer monsters (will only work on wads with multiplayer monsters)
	3.) adding shotgun start
	4.) add lives

	Ways to make the game harder:

	1.) fast monsters
	2.) increase damagefactor
	3.) remove double ammo
	4.) respawning monsters
	5.)

	Gameplay changes that don't really affect difficulty per se:

	1.) random player starts
	2.) infinite height for rockets
	3.) can't walk on top of monsters (okay, that is actually super annoying)
	4.) no freelook (if no freelook, then infinite damage radius OK)
	5.) no rocket jumping
	6.) force GL defaults
	7.) change kills to points on scoreboard
	8.) no crosshair



4.) Choose 4 players or 16 players

	For 4 players:

	For 16 players:
***********************************************************************************************************************************




***********************************************************************************************************************************
------------------------------------------------|
|CLASS STRUCTURE FOR THE ACTUAL SERVER MANAGER  |
|-----------------------------------------------|
|Class Name: Server Manager                     |
|                                               |
|-Class Variables:                              |
|      -List of ACTIVE Zandronum Server Objects |
|-Class Functions:                              |
|      -Add a server                            |
|      -Remove a server                         |
|      -Kill all servers                        |
|-----------------------------------------------|
Class Name: Zandronum Server Object (maybe this could eventually be considered a more generic version, with Port as a class var)

-Class Variables:
	-PID
	-start string
	-Zandronum Server Data Tuple


Tuple Name: Zandronum Server Data Tuple

-Tuple Variables:
	-IWAD
	-PWAD file names (whether or not map pack or mod is irrelevant here)
	-Dmflags [DMFLAGS, DMFLAGS1, DMFLAGS2, COMPATFLAGS, COMPATFLAGS2]
	-Gamemode
	-Variation


(from above)
-IWAD
-PWAD(s):
	1.) Map Pack
	2.) Game modification
-DMFLAGs:
	1.) DMFLAGS
	2.) DMFLAGS1
	3.) DMFLAGS2
	4.) COMPATFLAGS
	5.) COMPATFLAGS2
-Game Mode
-Gamemode-related CVARS
-Admin/Server CVARS
-OPTIONAL:
	1.) MAPLIST
	2.) Game modification
		PWAD spefific CVARS


***********************************************************************************************************************************




***********************************************************************************************************************************
Script B breakdown:

-------------------------------
|  Player-Server interactions |
-------------------------------
| -The IRC bot can add option |
|    to allow in-server chat  |
|    in the form of server    |
|    interactions.            |
| -Polls, suggestions, etc.   |
| -Through Server, IRC, (site)|
| -This was a suggestion to me|
-------------------------------
***********************************************************************************************************************************




***********************************************************************************************************************************
                                                                       WADs:
***********************************************************************************************************************************
1.   Hell Revealed I
2.   Hell Revealed II (note: it seems map17 has a broken area even with fix, gotta check this out later)
3.   Alien Vendetta
4.   Kama Sutra (MAP07 -- one time only door maybe 12-in-1-surv has a fix [Frits's fix])
5.   Memento Mori I
6.   Memento Mori II
7.   Epic I
8.   Epic II
9.   Doom II
10.  Requiem (map 21 broken; starting teleport & map 09 broken; starting megasphere + second switch area also broken)
11.  Doom 2 Uunleashed
12.  Doom Core
13.  Z300
14.  Interception
15.  Back to Saturn X
16.  Ogre Labs
17.  Europa I
18.  Europa II
19.  Europa III: The Dark Side of Vrack
20.  Sunder
21.  Deus Vult I
22.  Deus Vult II
23.  Icarus: Alien Vanguard
24.  TNT
25.  Plutonia
26.  Jenesis (end of map23 is broken, a lift doesn't rise all the way up like it should)
27.  EAXT
28.  Heretic
29.  Heretic Treasure Chest
30.  FDoom
31.  Community Chest IV
32.  Survive in Hell
33.  Vanguard
34.  Ultimate Doom
35.  2002: A Doom Odyssey
36.  Hellbound
37.  Alpha and Delta Survival Invasion
38.  Armageddon Survival Invasion
39.  Community Chest I
40.  Chex Quest
41.  IC DooM
42.  Lunatic
43.  Enjay Zdoom 2001
44.  Plutonia II
45.  Plutonia Revisited Community Project
46.  The Rebirth
47.  Reverie
48.  Speed of Doom
49.  Stock Survival Invasion
50.  Vrack wads
51.  Vae Victus II
52.  Whispers of Satan
53.  Wolfenstein 3D mappack
54.  JtH (okay, not really)
55.  CDoom64
56.  TVR! (AKA Revolution,  ie. #104 apparently, i dunno, doesn't seem very impressive)
57.  School Doom
58.  Action Doom I
59.  Action Doom II
60.  Concerned
61.  Whitemare II (MAP20 and MAP30 are broken; broken one time doors & some teles as well that break [especially in pits])
62.  Chex Quest
63.  Needs More Detail I
64.  Needs More Detail II
65.  Community Chest III
66.  Dark Tartarus
67.  Shaitan's Luck (needs the Frits' fix from 12-in-1-surv)
68.  Unholy Realms (the font is terrible!)
69.  UAC Ultra
70.  Pertiditon's Gate
71.  ZPack (has a tendency to break in multiplayer)
72.  New Doom Community Project
73.  One Monster
74.  10 Sectors, 1024 WADs
75.  Brotherhood of Ruin
76.  Equinox
77.  Hell Core
78.  Heroes Tales (uses tnt.wad as iwad)
79.  New Gothic Movement (this wad has some 3k+ monster maps)
80.  Claustrophobia and Congestion (not too great for co-op?)
81.  Vile Core
82.  Dimensions of Time (not meant for pistol start so it runs bad)
83.  Dimensions of Time II (?)
84.  Prayers of Armageddon
85.  Mars Wars (apparently just came out)
86.  Mock II
87.  Scientist I
88.  Scientist II
89.  Cyber Dreams
90.  Khorus
91.  Khorus's Speedy Shit (not co-op friendly, according to my good friend rodrigo)
92.  K-Mega
93.  Crusades: An Unholy War
94.  Base Ganymede: Complete
95.  Base Ganymede: Episode 2
96.  Revenge of the 90's
97.  Death Tormention I
98.  Death Tormention II
99.  Death Tormention III
100. Suitcase of Gor
101. Going Down: Episode I
102. Brutalized Doom I
103. Brutalized Doom II
104. Revolution (see #56)
105. KDiZD
106. Destination Unkown
107. Going Down
108. Resurgence (chillax-esque :\)
109. Hacx
110. Eternal
111. Nova: The Birth (note: map31 causes lag from too many lifts moving at once, it's blacklisted on best-ever)
112. Zones of Fear
113. Neodoom
114. Scythe (wow, did I really forget this classic?)
115. Scythe II
116. Scythe X

***********************************************************************************************************************************
                                                                       Mods:
***********************************************************************************************************************************
0. No mods
1. Oneshot
2. Hard Doom
3. MS Paint Doom (will need to grab files, multiple versions)
4. Samsara
5. FF-Zombie
6. WW-Nazis
7. Complex Doom (note: do not force invisible stuff to be visible)
8. Complex Doom - Ammo only respawn patch
9. Shared Resources
10. Plague
11. Heretic++ (heretic only ofc)
12. BURL TUMD (not sure what this was)
13. WW-Stranger (not sure what this was either)
14. Wrath of Chronos RPG
15. Smooth Weapons
16. Doom Noir (black and white, also heh the title)
17. Satanic (some hexen or heretic mod that miv played)
18. Retarded Classes (RetardedCM file name, this was requested to me by <SKR>CaveStoryPlaya999)
19. Anti-nomstuff (for vanilla only)
20. Icon of Sin fix (iosfix.wad)
21. SNS Ammo-only respawn fix



***********************************************************************************************************************************
 This was written long before the above stuff was written.  It's sort of just hidden on the bottom just in case I need to look back
 on it to see if I have possibly forgotten anything that I may have wanted in this project at the start.
***********************************************************************************************************************************


Okay, so what this project will have is:

1.) A version of Best-Ever that can be run entirely through IRC only
	- Gives the option of adding in a iwad, wad, or mod, in simple command through IRC
	- Only certain people will have the ability to utilize the bot.
	- You can view all of the servers that are currently running through a command, and you can choose to kill any server at will
	  (like BE-bot does)
		- For viewing the servers, suppose you are viewing your servers using this command as described.  You should be able
		  to determine the following:
			1.) Whether or not a particular server was added through a saved slot (and see what slot # it is), or if it
			    was randomly generated (and see the command)
				-If the server was randomly generated, be able to save the server in a slot, for future use.
			2.) Full server information.  So, this could be its own command.  Basically, .info 30 and you could see all
			    of the information for server #30 there is.
			3.) Perhaps, as a extra feature in the future, see the memory usage, cpu usage, etc. for each server.  Like
			    an htop command for only your server cluster
			4.) Anything else I might have missed.
	- You can save as many server slots as possible, exactly like in BE-bot
	- Now, this is important.  With over a hundred wads, I don't have nearly enough space to store every single wad.  So, what
          I will do instead is..
		- When I want to host any server, what I will do is I will specify the name of the wads, like .host does in BE-bot.
		  However...
			- Instead of storing the wads permanently on the HDD, I will actually try to implement a simple system as
			  such:
				- When we add in a pwad or mod to our database of files, we will have attached a URL to each of
				  them.  This will basically be the download path
				  for the files.  So, when we start a server, we will:
					1.) Download the file(s)
					2.) Host the server
					3.) When the server is dead, we will automate the process of removing the file from the HDD.
					4.) There will be restrictions.  Here is how we will manage space.
						- Look at the size of the file(s), and see if there is enough space first to
						  download it.
						- If the file size (or total file size, if multiple files) is small (meaning, it
						  won't take more than a second for
						  it to download the group of files):
							- We will just follow the normal procedure
						- However, if the file size is *relatively small* (meaning, it takes up less than
						  some percentage of HDD space [this will be a variable in our code,] but it will
						  take quite a bit of time to download, say the dtinv music file, considering this
						  takes up a lot of time to download and there could be a lot of servers to run at
						  once, this adds up quickly):
							- We will use the following system.
								- Download the wad if this is the first appearance of it on the HDD.
								- But, after we shut down the server, don't delete the file.
								- After a certain amount of time has passed, if the wad hasn't been
								  run since, delete it from the HDD.
						- Now, in order for this to be considered practical, we would have to really keep
						  track of the HDD space.  So, if we reach a critical level and there is only a
						  certain amount of space left (make this a variable, say, 5%), then we will have to
						  do a cleanup as such:
							- Increase the variable for the percentage of HDD space for each file by a set
							  number.  Determine how much space that would save us, and if that is more
							  than a set percentage of hard drive space (say, 40% or greater), then we
							  will remove those files, and increase the percentage.  Then, the next time
							  someone tries to host those files, we can cache those files instead of
							  permanently storing them.
	- Add a server randomizer command
		- First you need to store the list below, as shown.  IWADS, PWADS, and MODS (okay, in the WADs list below IWADS and
		  WADS are mixed together :\)
			- In this list, you can store in "override settings", basically extra commands that must be set no matter what
			  (say, jumping or crouching, or some other extraneous commands from mods like Samsara, for instance)
			- For each item, you will have to store the names of the wads, and attach urls to each of them.
		- Then, you choose the number of servers to run.
		- You can choose to exclude certain mappacks.  Specify them as numbers (eg. 1-19, 40-100, mod 1-4)
		- Then, you can specify if you want to:
			1.) use default dmflags
			2.) or choose your own (and the added ability to override the settings in the "override settings" shown above)
			3.) or actually choose to completely randomize the flags as shown in the process at the very bottom of this
			    file
		- When hosting each server, follow the same procedure for hosting the server as mentioned above.
	- Add the ability to "rotate" the servers on a weekly basis (or daily, user specified information).
		- Basically, you can allow the server host to change a specified number of servers every x days.  It could be almost
		  like a "weekly challenge" or a "daily challenge".
		- Be able to do do this *more than once* on the cluster.  Perhaps someone would like the ability to have both "daily
		  challenge" servers and "weekly challenge" servers.
		- Allow the user to give a special name to the special set of servers so it can be viewed easily in the custom
		  server-viewing command as shown above.
		- We need to also work on the format for specifying the time period.  This could be a certain amount of time
		  (eg. 7days, 1day, 1hour, 1day1hour, etc.)
		- For now, the only way I can think of making this work is if it was a randomized server.  You can then tell the user
		  to basically input the randomizer command that he would like to have run in this special command.
		 (eg. .(automated server change command) 7days [insert randomizer command here] "Weekly Challenge!"
	- List of BE-bot commands that will be useful on this IRC-only bot:
		.commands
		I don't know what .file is, but it could be, in our bot, replaced with the .addfile command as shown above?
		.kill
		.load
		.save
		.servers (this shows the # of servers running total.  This could be changed to be our servers command as shown above)
		.slot
		.uptime
		.whoami (?? I don't know if this is useful, basically take the authentication system in BE-bot as a basis)
		NOTE: There is also a part of BE-bot that deals with server activity.  This might be something really worth expanding upon.
		      Basically, they use this "kill inactive servers" command that will kill servers that are more than x days inactive,
		      and I have no idea how they determine whether or not a server is inactive, but this might actually be useful for not
		      just killing inactive servers but also for other purposes (ie. managing hard disk space on wads that aren't ever
		      played, automatically killing these inactive servers, and also "red flagging" the wad/mod as being inactive which can
		      affect the server randomizer.)



------------  --------------------   ------------------------------
|  IRC BOT  |  |   CORE PROJECT   |  | Zandronum Server Data Tuple |
------------  --------------------   -------------------------------
|  DO LATER |  | Details about    |  | -IWAD                       |
|           |  | what the project |  | -PWAD(s):                   |
|           |  | will do go here. |  |     1.) Map Pack            |
------------   -------------------   |     2.) Game modification   |
                                     | -DMFLAGs:                   |
----------------------------------   |     1.) DMFLAGS             |
|     LIST OF IWADs AND PWADs     |  |     2.) DMFLAGS1            |
----------------------------------   |     3.) DMFLAGS2            |
| 1.) iwad or pwad                |  |     4.) COMPATFLAGS         |
| 2.) MD5SUM of file              |  |     5.) COMPATFLAGS2        |
| 3.) if iwad,                    |  | -Game Mode                  |
|              leave blank        |  | -Gamemode-related CVARS     |
|     if pwad,                    |  | -Admin/Server CVARS         |
|     map pack or mod             |  | -OPTIONAL:                  |
| 4.) if iwad,                    |  |     1.) MAPLIST             |
|              leave blank        |  |     2.) Game modification   |
|     if pwad,                    |  |           PWAD spefific     |
|              if mod,            |  |	         CVARS             |
|                      blank      |  -------------------------------
|              if map pack,       |
|     list of compatible gamemodes|
|     (note in format compatible  |
|       for taking in from the    |
|       database and analysing the|
|       string to get gamemodes.) |
| 5.) if iwad or map pack,        |
|     maplist (same note as above)|
|     if mod,                     |
|              leave blank        |
| 6.) REQUIRED LINES OF TEXT FOR  |
|       THE CONFIG FILE           |
-----------------------------------